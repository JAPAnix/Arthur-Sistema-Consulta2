// --- Utilitários para especialidades ---
function salvarUltimaEspecialidade(especialidade) {
    localStorage.setItem('ultimaEspecialidade', JSON.stringify(especialidade));
}

function obterUltimaEspecialidade() {
    return JSON.parse(localStorage.getItem('ultimaEspecialidade'));
}

// --- Dados em memória ---
let especialidades = [];
let medicos = [];

// --- Atualiza <select> de especialidades no cadastro de médico ---
function atualizarSelectEspecialidades() {
    const select = document.getElementById('especialidadeMedico');
    if (!select) return;

    select.innerHTML = '<option value="">Selecione uma Especialidade</option>';

    especialidades.forEach(esp => {
        const option = document.createElement('option');
        option.value = esp.nome;
        option.textContent = esp.nome;
        select.appendChild(option);
    });
}

// --- Renderiza especialidades na página de especialidades ---
function renderizarEspecialidades() {
    const container = document.querySelector('.appointments-list');
    if (!container) return;

    container.innerHTML = '';
    especialidades.forEach((esp, index) => {
        const card = document.createElement('div');
        card.className = 'appointment-card';
        card.innerHTML = `
            <div class="appointment-details">
                <h3>${esp.nome}</h3>
                <p>${esp.descricao}</p>
            </div>
            <div class="appointment-actions">
                <button class="btn btn-outline" onclick="removerEspecialidade(${index})"><i class="fas fa-trash-alt"></i></button>
            </div>
        `;
        container.appendChild(card);
    });
}

// --- Cadastrar nova especialidade ---
document.addEventListener('DOMContentLoaded', () => {
    const formEsp = document.getElementById('formCadastrarEspecialidade');
    if (formEsp) {
        formEsp.addEventListener('submit', (e) => {
            e.preventDefault();
            const nome = document.getElementById('nomeEspecialidade').value.trim();
            const descricao = document.getElementById('descricaoEspecialidade').value.trim();

            if (nome && descricao) {
                const novaEspecialidade = { nome, descricao };
                especialidades.push(novaEspecialidade);
                salvarUltimaEspecialidade(novaEspecialidade);
                renderizarEspecialidades();
                atualizarSelectEspecialidades();
                formEsp.reset();
                alert('Especialidade cadastrada com sucesso!');
            }
        });
    }

    // Cadastrar médico
    const formMed = document.getElementById('formCadastrarMedico');
    if (formMed) {
        formMed.addEventListener('submit', (e) => {
            e.preventDefault();

            const nome = document.getElementById('nomeMedico').value.trim();
            const crm = document.getElementById('crmMedico').value.trim();
            const telefone = document.getElementById('telefoneMedico').value.trim();
            const especialidade = document.getElementById('especialidadeMedico').value;

            if (nome && crm && telefone && especialidade) {
                medicos.push({ nome, crm, telefone, especialidade });
                alert('Médico cadastrado com sucesso!');
                formMed.reset();
            }
        });
    }

    atualizarSelectEspecialidades();
    renderizarEspecialidades();
});

// --- Remover especialidade ---
function removerEspecialidade(index) {
    if (confirm('Deseja remover esta especialidade?')) {
        especialidades.splice(index, 1);
        renderizarEspecialidades();
        atualizarSelectEspecialidades();
    }
}

// --- Classe principal ---
class MedSchedulePro {
    constructor() {
        this.appointments = JSON.parse(localStorage.getItem('medScheduleAppointments')) || [];
        this.patients = JSON.parse(localStorage.getItem('medSchedulePatients')) || [];
        this.doctors = [];
        this.initializeApp();
    }

    initializeApp() {
        this.bindEvents();
        this.populateSpecialties();
        this.populateDoctors();
        this.renderAppointments();
        this.updateDashboardStats();
        this.initMaskListeners();
    }

    bindEvents() {
        const newAppointmentForm = document.getElementById('newAppointmentForm');
        newAppointmentForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.createAppointment();
        });

        const newAppointmentBtn = document.getElementById('newAppointmentBtn');
        newAppointmentBtn.addEventListener('click', () => {
            this.openNewAppointmentModal();
        });

        const specialtySelect = document.getElementById('specialty');
        specialtySelect.addEventListener('change', () => {
            this.filterDoctorsBySpecialty();
        });
    }

    populateSpecialties() {
        const specialtySelect = document.getElementById('specialty');
        if (!specialtySelect) return;

        const ultimaEspecialidade = obterUltimaEspecialidade();
        specialtySelect.innerHTML = '<option value="">Selecione uma Especialidade</option>';

        if (ultimaEspecialidade) {
            const option = document.createElement('option');
            option.value = ultimaEspecialidade.nome;
            option.textContent = ultimaEspecialidade.nome;
            specialtySelect.appendChild(option);
        }
    }

    initMaskListeners() {
        const cpfInput = document.getElementById('patientCPF');
        cpfInput.addEventListener('input', (e) => {
            e.target.value = this.formatCPF(e.target.value);
        });
    }

    formatCPF(value) {
        return value
            .replace(/\D/g, '')
            .replace(/(\d{3})(\d)/, '$1.$2')
            .replace(/(\d{3})(\d)/, '$1.$2')
            .replace(/(\d{3})(\d{1,2})/, '$1-$2')
            .replace(/(-\d{2})\d+?$/, '$1');
    }

    populateDoctors() {
        const doctorSelect = document.getElementById('doctor');
        doctorSelect.innerHTML = '<option value="">Selecione um Médico</option>';

        this.doctors.forEach(doctor => {
            const option = document.createElement('option');
            option.value = doctor.id;
            option.textContent = doctor.name;
            doctorSelect.appendChild(option);
        });
    }

    filterDoctorsBySpecialty() {
        const specialtySelect = document.getElementById('specialty');
        const doctorSelect = document.getElementById('doctor');
        const selectedSpecialty = specialtySelect.value;

        doctorSelect.innerHTML = '<option value="">Selecione um Médico</option>';

        const filteredDoctors = this.doctors.filter(doctor => doctor.specialty === selectedSpecialty);

        filteredDoctors.forEach(doctor => {
            const option = document.createElement('option');
            option.value = doctor.id;
            option.textContent = doctor.name;
            doctorSelect.appendChild(option);
        });
    }

    createAppointment() {
        const patientName = document.getElementById('patientName').value.trim();
        const patientCPF = document.getElementById('patientCPF').value;
        const specialty = document.getElementById('specialty').value;
        const doctorId = document.getElementById('doctor').value;
        const appointmentDate = document.getElementById('appointmentDate').value;
        const observations = document.getElementById('observations').value.trim();

        if (!this.validateAppointmentForm()) return;

        const newAppointment = {
            id: Date.now(),
            patientName,
            patientCPF,
            specialty,
            doctorId,
            date: appointmentDate,
            observations,
            status: 'confirmed'
        };

        this.appointments.push(newAppointment);
        this.saveAppointments();
        this.renderAppointments();
        this.updateDashboardStats();
        this.closeModal();
        document.getElementById('newAppointmentForm').reset();
    }

    validateAppointmentForm() {
        const patientName = document.getElementById('patientName').value.trim();
        const patientCPF = document.getElementById('patientCPF').value;
        const specialty = document.getElementById('specialty').value;
        const doctorId = document.getElementById('doctor').value;
        const appointmentDate = document.getElementById('appointmentDate').value;

        if (patientName.length < 3) {
            alert('Nome do paciente deve ter pelo menos 3 caracteres.');
            return false;
        }

        if (!this.validateCPF(patientCPF)) {
            alert('CPF inválido.');
            return false;
        }

        if (!specialty) {
            alert('Selecione uma especialidade.');
            return false;
        }

        if (!doctorId) {
            alert('Selecione um médico.');
            return false;
        }

        if (!appointmentDate) {
            alert('Selecione uma data e hora para a consulta.');
            return false;
        }

        const conflictingAppointment = this.appointments.find(app => 
            app.doctorId === doctorId && 
            app.date === appointmentDate &&
            app.status !== 'canceled'
        );

        if (conflictingAppointment) {
            alert('Já existe uma consulta marcada para este médico neste horário.');
            return false;
        }

        return true;
    }

    validateCPF(cpf) {
        cpf = cpf.replace(/[^\d]+/g, '');
        if (cpf.length !== 11 || /^()+$/.test(cpf)) return false;
        let sum = 0, rest;
        for (let i = 1; i <= 9; i++) sum += parseInt(cpf.substring(i-1, i)) * (11 - i);
        rest = (sum * 10) % 11;
        if (rest === 10 || rest === 11) rest = 0;
        if (rest !== parseInt(cpf.substring(9, 10))) return false;
        sum = 0;
        for (let i = 1; i <= 10; i++) sum += parseInt(cpf.substring(i-1, i)) * (12 - i);
        rest = (sum * 10) % 11;
        if (rest === 10 || rest === 11) rest = 0;
        return rest === parseInt(cpf.substring(10, 11));
    }

    renderAppointments() {
        const appointmentsList = document.getElementById('appointmentsList');
        appointmentsList.innerHTML = '';
        const sorted = this.appointments.filter(app => app.status !== 'canceled').sort((a, b) => new Date(a.date) - new Date(b.date));
        if (sorted.length === 0) {
            appointmentsList.innerHTML = '<div style="text-align:center;padding:20px;color:gray;">Nenhuma consulta agendada</div>';
            return;
        }
        sorted.forEach(app => {
            const doctor = this.doctors.find(d => d.id == app.doctorId);
            const formattedDate = new Date(app.date).toLocaleString('pt-BR', { dateStyle: 'full', timeStyle: 'short' });
            const card = document.createElement('div');
            card.className = 'appointment-card';
            card.innerHTML = `
                <div class="appointment-details">
                    <h3>${app.patientName}</h3>
                    <p><strong>Especialidade:</strong> ${this.capitalizeFirst(app.specialty)} | <strong>Médico:</strong> ${doctor ? doctor.name : 'Não definido'}</p>
                    <p><strong>Data:</strong> ${formattedDate}</p>
                    <span class="status-badge status-${app.status}">${this.getStatusLabel(app.status)}</span>
                </div>
                <div class="appointment-actions">
                    <button class="btn btn-secondary" onclick="medSchedulePro.rescheduleAppointment(${app.id})"><i class="fas fa-calendar-alt"></i> Reagendar</button>
                    <button class="btn" style="background-color:#e74c3c" onclick="medSchedulePro.cancelAppointment(${app.id})"><i class="fas fa-times-circle"></i> Cancelar</button>
                </div>
            `;
            appointmentsList.appendChild(card);
        });
    }

    rescheduleAppointment(id) {
        const appointment = this.appointments.find(app => app.id === id);
        if (!appointment) return;
        const newDate = prompt('Digite a nova data da consulta:', appointment.date);
        if (newDate) {
            appointment.date = newDate;
            this.saveAppointments();
            this.renderAppointments();
            this.updateDashboardStats();
        }
    }

    cancelAppointment(id) {
        const appointment = this.appointments.find(app => app.id === id);
        if (!appointment) return;
        if (confirm('Tem certeza que deseja cancelar esta consulta?')) {
            appointment.status = 'canceled';
            this.saveAppointments();
            this.renderAppointments();
            this.updateDashboardStats();
        }
    }

    updateDashboardStats() {
        const today = new Date();
        const todayAppointments = this.appointments.filter(app => app.status !== 'canceled' && new Date(app.date).toDateString() === today.toDateString());
        const upcomingAppointments = this.appointments.filter(app => app.status !== 'canceled' && new Date(app.date) > today);
        const totalPatients = new Set(this.appointments.filter(app => app.status !== 'canceled').map(app => app.patientCPF)).size;
        document.getElementById('todayAppointmentsCount').textContent = todayAppointments.length;
        document.getElementById('upcomingAppointmentsCount').textContent = upcomingAppointments.length;
        document.getElementById('totalPatientsCount').textContent = totalPatients;
    }

    saveAppointments() {
        localStorage.setItem('medScheduleAppointments', JSON.stringify(this.appointments));
    }

    openNewAppointmentModal() {
        document.getElementById('newAppointmentModal').style.display = 'flex';
    }

    closeModal() {
        document.getElementById('newAppointmentModal').style.display = 'none';
        document.getElementById('newAppointmentForm').reset();
        this.populateDoctors();
    }

    capitalizeFirst(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    getStatusLabel(status) {
        const labels = { confirmed: 'Confirmado', pending: 'Pendente', canceled: 'Cancelado' };
        return labels[status] || status;
    }
}

const medSchedulePro = new MedSchedulePro();

function closeModal() {
    medSchedulePro.closeModal();
}